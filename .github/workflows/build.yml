on:
  workflow_call:
  workflow_dispatch:

env:
  UPSTREAM_REMOTE: https://dawn.googlesource.com/dawn

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      chromium-tag: ${{ steps.find-tag.outputs.chromium-tag }}
      chromium-hash: ${{ steps.find-tag.outputs.chromium-hash }}
      mirror-tag: ${{ steps.find-tag.outputs.mirror-tag }}
      skip: ${{ steps.find-tag.outputs.skip }}
    steps:
      - name: Find latest tag
        id: find-tag
        run: |
          # Get upstream chromium tags and our existing mirror release tags
          # NB: Unfortunately google/dawn repo does not mirror tags, so we must fetch them
          # from upstream and convert the ref to a commit hash.
          # NB2: chromium/foo refs are actually branches, not tags
          git ls-remote ${{ env.UPSTREAM_REMOTE }} chromium/\* > chromium-refs
          cat chromium-refs | cut -f2 > chromium-tags
          git ls-remote --tags https://github.com/${GITHUB_REPOSITORY}.git mirror/\* | cut -f2 > mirror-tags

          # We intend to build the latest available chromium tag...
          cat chromium-tags | sort -rV | head -n 1 | tail -c +12 > latest-chromium-tag

          # ...which would lead to a new matching mirror tag
          echo mirror/$(cat latest-chromium-tag | tail -c +10) > new-mirror-tag

          # We convert the tag into a commit hash
          grep $(cat latest-chromium-tag) chromium-refs | cut -f1 > latest-chromium-hash

          # 'skip' is non empty if the new tag already exists
          echo "skip=$(grep -Fx refs/tags/$(cat new-mirror-tag) mirror-tags)" >> "$GITHUB_OUTPUT"
          echo "chromium-tag=$(cat latest-chromium-tag)" >> "$GITHUB_OUTPUT"
          echo "chromium-hash=$(cat latest-chromium-hash)" >> "$GITHUB_OUTPUT"
          echo "mirror-tag=$(cat new-mirror-tag)" >> "$GITHUB_OUTPUT"

          # Log to stdout for debug
          echo "skip=$(grep -Fx refs/tags/$(cat new-mirror-tag) mirror-tags)"
          echo "chromium-tag=$(cat latest-chromium-tag)"
          echo "chromium-hash=$(cat latest-chromium-hash)"
          echo "mirror-tag=$(cat new-mirror-tag)"

  create-release:
    if: ${{ !needs.prebuild.outputs.skip }}
    runs-on: ubuntu-latest
    needs: prebuild
    permissions:
      contents: write
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MIRROR_TAG: ${{ needs.prebuild.outputs.mirror-tag }}
          CHROMIUM_TAG: ${{ needs.prebuild.outputs.chromium-tag }}
        run: >
          gh release create "$MIRROR_TAG"
          --repo=${{ github.repository }}
          --title="$CHROMIUM_TAG"
          --notes="Automatic build of tag [$CHROMIUM_TAG](https://dawn.googlesource.com/dawn/+/refs/heads/$CHROMIUM_TAG)."

  build-artifacts:
    if: ${{ !needs.prebuild.outputs.skip }}
    strategy:
      matrix:
        os:
          - name: linux
            image: ubuntu-latest
            install-deps: |
              sudo apt-get update -y
              sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev mesa-common-dev libx11-xcb-dev libxi-dev pkg-config nodejs npm
          - name: windows
            image: windows-latest
          - name: macos
            image: macos-latest
        config: [ Debug, Release ]

    runs-on: ${{ matrix.os.image }}
    needs: [ prebuild, create-release ]
    permissions:
      contents: write
    steps:
      - name: Install dependencies
        if: ${{ matrix.os.install-deps }}
        run: ${{ matrix.os.install-deps }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prebuild.outputs.chromium-hash }}

      - name: Apply patches
        shell: bash
        run: |
          git fetch origin github

          # Use custom fetch_dependencies script because the official one mises some new dependencies
          git checkout origin/github -- tools/fetch_dawn_dependencies.py

      - name: Configure
        run: >
          cmake
          -B out
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DCMAKE_INSTALL_PREFIX=out/install
          -DBUILD_TESTING=OFF
          -DDAWN_ENABLE_INSTALL=ON
          -DTINT_ENABLE_INSTALL=ON
          -DTINT_BUILD_TESTS=OFF
          -DDAWN_FETCH_DEPENDENCIES=ON
          -DBUILD_SHARED_LIBS=ON

      - name: Build
        run: >
          cmake
          --build out
          --config ${{ matrix.config }}

      - name: Install
        run: >
          cmake
          --install out
          --config ${{ matrix.config }}

      - name: Compress artifact
        uses: eliemichel/dawn-prebuilt/.github/actions/zip@github
        with:
          name: dawn-${{ matrix.os.name }}-x64-${{ matrix.config }}
          path: '*'
          wd: out/install

      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ needs.prebuild.outputs.mirror-tag }}
          --repo=${{ github.repository }}
          out/install/dawn-${{ matrix.os.name }}-x64-${{ matrix.config }}.zip
